# -*- coding: utf-8 -*-
"""heap

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Du0Sw9XKAxTT5Q33We9QNUbEA-HOW9hK
"""

class Heap :
    def __init__(self, *args) :
        if len(args) != 0 :
            self.__A = args[0]
        else :
            self.__A = []

    def insert(self, x) :
        self.__A.append(x)
        self.__percolateUp(len(self.__A) -1)

    def __percolateUp(self, i:int) :
        parent = (i - 1) // 2
        if i > 0 and self.__A[i] > self.__A[parent] :
            self.__A[i], self.__A[parent] = self.__A[parent], self.__A[i]
            self.__percolateUp(parent)

    def deleteMax(self) :
        if (not self.isEmpty()) :
            max = self.__A[0]
            self.__A[0] = self.__A.pop()
            self.__percolateDown(0)
            return max
        else :
            return None

    def __percolateDown(self, i:int) :
        child = 2 * i + 1
        right = 2 * i + 2
        if (child <= len(self.__A) -1) :
            if (right <= len(self.__A) -1 and self.__A[child] < self.__A[right]) :
                child = right
            if self.__A[i] < self.__A[child] :
                self.__A[i], self.__A[child] = self.__A[child], self.__A[i]
                self.__percolateDown(child)

    def bulidHeap(self) :
        for i in range((len(self.__A) - 2) // 2, -1, -1) :
            # 역순으로 A[0]까지
            self.__percolateDown(i)

    def max(self) :
        return self.__A[0]

    def isEmpty(self) :
        return len(self.__A) == 0

    def clear(self) :
        self.__A = []

    def size(self) -> int : # 힙의 크기
        return len(self.__A)