# -*- coding: utf-8 -*-
"""linkedlistbasic

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sjJXds_wSzanltpuLci2PmJjX2gRX-K3
"""

from listnode import ListNode

class LinkedListBasic :
    def __init__(self) :
        self.__head = ListNode('dummy', None)
        self.__numItems = 0

    # insert
    def insert(self, i : int, newItem) :
        if i >= 0 and i <= self.__numItems :
            prev = self.__getNode(i - 1)
            newNode = ListNode(newItem, prev.next)
            prev.next = newNode
            self.__numItems += 1
        else :
            print("index", i, " : out of bound in insert()") # 필요 시 에러 처리

    # append
    def append(self, newItem) :
        prev = self.__getNode(self.__numItems - 1)
        newNode = ListNode(newItem, prev.next)
        prev.next = newNode
        self.__numItems += 1

    # pop
    def pop(self, i : int) :
        if (i>= 0 and i <= self.__numItems - 1) :
            prev = self.__getNode(i - 1)
            curr = prev.next
            prev.next = curr.next
            retItem = curr.item
            self.__numItems -= 1
            return retItem
        else :
            return None

    # remove
    def remove(self, x) :
        (prev, curr) = self.__findNode(x)
        if curr != None :
            prev.next = curr.next
            self.__numItems -= 1
            return x
        else :
            return None

    # get
    def get(self, i : int) :
        if self.isEmpty() :
            return None
        if (i >= 0 and i <= self.__numItems - 1) :
            return self.__getNode(i).item
        else :
            return None

    # index
    def index(self, x) -> int :
        curr = self.__head.next # 0번 노드 : 더미 헤드 다음 노드
        for id in range(self.__numItems) :
            if curr.item == x :
                return id
            else :
                curr = curr.next
        return -1 # 안 쓰는 인덱스

    # isEmpty
    def isEmpty(self) -> bool :
        return self.__numItems == 0

    # size
    def size(self) -> int :
        return self.__numItems

    #clear
    def clear(self) :
        self.__head = ListNode("dummy", None)
        self.__numItems = 0

    #count
    def count(self, x) -> int :
        cnt = 0
        curr = self.__head.next
        while curr != None :
            if curr.item == x :
                cnt += 1
            curr = curr.next
        return cnt

    # extend
    def extend(self, a) :
        for index in range(a.size()) :
            self.append(a.get(index))

    # copy
    def copy(self) :
        a = LinkedListBasic()
        for index in range(self.__numItems) :
            a.append(self.get(index))
        return a

    # reverse
    def reverse(self) :
        a = LinkedListBasic()
        for index in range(self.__numItems) :
            a.insert(0, self.get(index))
        self.clear()
        for index in range(a.size()) :
            self.append(a.get(index))

    # sort
    def sort(self) -> None :
        a = []
        for index in range(self.__numItems) :
            a.append(self.get(index))
        a.sort()
        self.clear()
        for index in range(len(a)) :
            self.append(a[index])

    # __findNode
    def __findNode(self, x) -> (ListNode, ListNode) :
        prev = self.__head # 더미 헤드
        curr = prev.next # 0번 노드
        while curr != None :
            if curr.item == x :
                return (prev, curr)
            else :
                prev = curr; curr = curr.next
        return (None, None)

    # __getNode
    def __getNode(self, i : int) -> ListNode :
        curr = self.__head # 더미 헤드, index : -1
        for index in range(i + 1) :
            curr = curr.next
        return curr

    # printList
    def printList(self) :
        curr = self.__head.next # 0번 노드 : 더미 헤드 다음 노드
        while curr != None :
            print(curr.item, end = ' ')
            curr = curr.next
        print()