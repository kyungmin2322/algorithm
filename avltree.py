{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNbsL3rHMAKFzczs+M4L98W",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kyungmin2322/algorithm/blob/main/avltree.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mFrtIFMbK3wf"
      },
      "outputs": [],
      "source": [
        "class AVLNode :\n",
        "    def __init__(self. newItem, left, right, h) :\n",
        "        self.item = newItem\n",
        "        self.left = left\n",
        "        self. right = right\n",
        "        self.height = h\n",
        "\n",
        "class AVLTree :\n",
        "    def __init__(self) :\n",
        "        self.NIL = AVLNode(None, None, None, 0)\n",
        "        self.__root = self.NIL\n",
        "        self.LL = 1; self.LR = 2; self.RR = 3; self.RL = 4\n",
        "        self.NO_NEED = 0\n",
        "        self.ILLEGAL = -1\n",
        "\n",
        "    def search(self, x) :\n",
        "        return self.__searchItem(self.__root, x)\n",
        "\n",
        "    def __searchItem(self, tNode:AVLNode, x) -> AVLNode :\n",
        "        if tNode == self.NIL :\n",
        "            return self.NIL\n",
        "        elif x == tNode.item :\n",
        "            return tNode\n",
        "        elif x < tNode.item :\n",
        "            return self.__searchItem(tNode.left, x)\n",
        "        else :\n",
        "            return self.__searchItem(tNode.right, x)\n",
        "\n",
        "    def insert(self, x) :\n",
        "        self.__root = self.__insertItem(self.__root, x)\n",
        "\n",
        "    def __insertItem(self, tNode:AVLNode, x) -> AVLNode :\n",
        "        if tNode == self.NIL :\n",
        "            tNode = AVLNode(x, self.NIL, self.NIL, 1)\n",
        "        elif x < tNode.item :\n",
        "            tNode.left = self.__insertItem(tNode.left, x)\n",
        "            tNode.height = 1 + max(tNode.right.height, tNode.left.height)\n",
        "            type = self.__needBalance(tNode)\n",
        "            if(type != self.NO_NEED) :\n",
        "                tNode = self.__balancecAVL(tNode, type)\n",
        "            else :\n",
        "                tNode.right = self.__insertItem(tNode.right, x)\n",
        "                tNode.height = 1 + max(tNode.right.height, tNode.left.height)\n",
        "                type = self.__needBalance(tNode)\n",
        "            if type != self.NO_NEED :\n",
        "                tNode = self.__balanceAVL(tNode, type)\n",
        "        return tNode\n",
        "\n",
        "    def delete(self, x) :\n",
        "        self.__root = self.__deleteItem(self.__root, x)\n",
        "\n",
        "    def __deleteItem(self, tNode:AVLNode, x) -> AVLNode :\n",
        "        if tNode == self.NIL :\n",
        "            return self.NIL\n",
        "        else :\n",
        "            if x == tNode.item :\n",
        "                tNode = self.__deleteNode(tNode)\n",
        "            elif x < tNode.item :\n",
        "                tNode.left = self.__deleteItem(tNode.left, x)\n",
        "                tNode.height = 1 + max(tNode.right.height, tNode.left.height)\n",
        "                type = self.__needBalance(tNode)\n",
        "                if type != self.NO_NEED :\n",
        "                    tNode = self.__balanceAVL(tNode, type)\n",
        "            else :\n",
        "                tNode.right = self.__deleteItem(tNode.right, x)\n",
        "                tNode.height = 1 + max(tNode.right.height, tNode.left.height)\n",
        "                type = self.__needBalance(tNode)\n",
        "                if type != self.NO_NEED :\n",
        "                    tNode = self.__balanceAVL(tNode, type)\n",
        "        return tNode\n",
        "\n",
        "    def __deleteNode(self, tNode:AVLNode) -> AVLNode :\n",
        "        if tNode.left == self.NIL and tNode.right == self.NIL :\n",
        "            return self.NIL\n",
        "        elif tNode.left == self.NIL :\n",
        "            return tNode.right\n",
        "        elif tNode.right == self.NIL :\n",
        "            return tNode.left\n",
        "        else :\n",
        "            (rtnItem, rtnNode) = self.__deleteMinItem(tNode.right)\n",
        "            tNode.item = rtnItem\n",
        "            tNode.right = rtnNode\n",
        "            tNode.height = 1 + max(tNode.right.height, tNode.left.height)\n",
        "            type = self.__neecBalance(tNode)\n",
        "            if type != self.NO_NEED :\n",
        "                tNode = self.__balanceAVL(tNode, type)\n",
        "            return tNode\n",
        "\n",
        "    def __deleteMinItem(self, tNode:AVLNode) -> tuple :\n",
        "        if tNode.left == self.NIL :\n",
        "            return (tNode.item, tNode.right)\n",
        "        else :\n",
        "            (rtnItem, rtnNode) = self.__deleteMinItem(tNode.right)\n",
        "            tNode.left = rtnNode\n",
        "            tNode.height = 1 + max(tNode.right.height, tNode.left.height)\n",
        "            type = self.__neecBalance(tNode)\n",
        "            if type != self.NO_NEED :\n",
        "                tNode = self.__balanceAVL(tNode, type)\n",
        "            return (tNode, rtnItem)\n",
        "\n",
        "    def __balanceAVL(self, tNode:AVLNode, type:int) -> AVLNode :\n",
        "        returnNode = self.NIL\n",
        "        if type == self.LL :\n",
        "            returnNode = self.__rightRotate(tNode)\n",
        "        elif type == self.LR :\n",
        "            tNode.left = self.__leftRotate(tNode.left)\n",
        "            returnNode = self.__rightRotate(tNode)\n",
        "        elif type == self.RR :\n",
        "            returnNode = self.__leftRotate(tNode)\n",
        "        elif type == self.RL :\n",
        "            tNode.right = self.__rightRotate(tNode.right)\n",
        "            returnNode = self.__leftRotate(tNode)\n",
        "        else :\n",
        "            print(\"Impossible type! Should be one of LL, LR, RR, RL\")\n",
        "        return returnNode\n",
        "\n",
        "    def __leftRotate(self, t:AVLNode) -> AVLNode :\n",
        "        RChild = t.right\n",
        "        if RChild == self.NIL :\n",
        "            print(t.item, \"'s RChild shouldn't be NIL!\")\n",
        "        RLChild = RChild.left\n",
        "        RChild.left = t\n",
        "        t.right = RLChild\n",
        "        t.height = 1 + max(t.left.height, t.right.height)\n",
        "        RChild.height = 1 + max(RChild.left.height, RChild.right.height)\n",
        "        return RChild\n",
        "\n",
        "    def __rightRotate(self, t:AVLNode) -> AVLNode :\n",
        "        LChild = t.left\n",
        "        if LChild == self.NIL :\n",
        "            print(t.item, \"'s LChild shouldn't be NIL!\")\n",
        "        LRChild = LChild.right\n",
        "        LChild.right = t\n",
        "        t.left = LRChild\n",
        "        t.height = 1 + max(t.left.height, t.right.height)\n",
        "        LChild.height = 1 + max(LChild.left.height, LChild.right.height)\n",
        "        return LChild\n",
        "\n",
        "    def __needBalance(self, t:AVLNode) -> int :\n",
        "        type = self.ILLEGAL\n",
        "        if(t.left.height + 2 <= t.right.height) :\n",
        "            if(t.right.left.height) <= t.right.right.height :\n",
        "                type = self.RR\n",
        "            else :\n",
        "                type = self.RL\n",
        "        elif(t.left.height) >= t.right.height + 2 :\n",
        "            if(t.left.left.height) >= t.left.right.height :\n",
        "                type = self.LL\n",
        "            else :\n",
        "                type = self.LR\n",
        "        else :\n",
        "            type = self.NO_NEED\n",
        "        return type\n",
        "\n",
        "    def isEmpty(self) -> bool :\n",
        "        return self.__root == self.NIL\n",
        "\n",
        "    def clear(self) :\n",
        "        self.__root = self.NIL"
      ]
    }
  ]
}